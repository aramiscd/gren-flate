module LengthLimitedHuffmanCodes exposing (calculate, merge, package)

{-| Based on <https://www.ics.uci.edu/~dan/pubs/LenLimHuff.pdf>

but the implementation is not as efficient

-}


type alias Node =
    { symbols : Array Int, weight : Int }


emptyNode : Node
emptyNode =
    { symbols = Array.empty, weight = 0 }


singletonNode : Int -> Int -> Node
singletonNode symbol weight =
    { symbols = Array.repeat 1 symbol, weight = weight }


mergeNodes : Node -> Node -> Node
mergeNodes node1 node2 =
    { symbols = Array.append node1.symbols node2.symbols
    , weight = node1.weight + node2.weight
    }


calculate maxBitWidth frequencies =
    let
        source =
            frequencies
                |> Array.indexedMap ( \ v1 v2 -> { v1 = v1, v2 = v2 } )
                |> Array.filter ( \ { v1 = _, v2 = f } -> f > 0 )
                |> Array.map ( \ { v1 = symbol, v2 = weight } -> singletonNode symbol weight )
                |> stableSortWith ( \ a b -> compare a.weight b.weight )

        weighted =
            -- -2 because rust ranges are exclusive, elm's are inclusive
            Array.range 0 (maxBitWidth - 2)
                |> Array.foldl ( \ _ w -> merge (package w) source ) source

        allSymbols =
            weighted
                |> package
                |> Array.flatMap .symbols

        loop symbols accum =
            case Array.popFirst symbols of
                Nothing ->
                    accum

                Just { first = symbol, rest } ->
                    loop rest (update symbol ( \ v -> v + 1 ) accum)
    in
    loop allSymbols (Array.repeat (Array.length frequencies) 0)


update index tagger array =
    case Array.get index array of
        Nothing ->
            array

        Just value ->
            Array.set index (tagger value) array


package : Array Node -> Array Node
package nodes =
    if Array.length nodes >= 2 then
        let
            newLen =
                Array.length nodes // 2

            loop currentNodes accum =
                case Array.popFirst currentNodes of
                    Nothing ->
                        -- we round down, so 0 and 1 elements are treated the same
                        Array.reverse accum

                    Just { first = self, rest = rest1 } ->
                        case Array.popFirst rest1 of
                            Nothing ->
                                Array.reverse accum

                            Just { first = other, rest = rest2 } ->
                                loop rest2 (Array.pushFirst (mergeNodes self other) accum)
        in
        loop nodes []

    else
        nodes


merge : Array Node -> Array Node -> Array Node
merge x y =
    mergeLoop x y Array.empty


mergeLoop : Array Node -> Array Node -> Array Node -> Array Node
mergeLoop xarr yarr accum =
    case { v1 = Array.popFirst xarr, v2 = Array.popFirst yarr } of
        { v1 = Nothing, v2 = _ } ->
            Array.append accum yarr

        { v1 = _, v2 = Nothing } ->
            Array.append accum xarr

        { v1 = Just { first = x, rest = xrest }, v2 = Just { first = y, rest = yrest } } ->
            if x.weight < y.weight then
                mergeLoop xrest yarr (Array.pushLast x accum)

            else
                mergeLoop xarr yrest (Array.pushLast y accum)


stableSortWith =
    -- Ich ziehe das hier als Zwischenschicht ein, weil ich nicht weiß, ob Array.sortWith stabil ist.
    -- TODO: Kläre, ob Array.sortWith stabil ist.
    Array.sortWith
