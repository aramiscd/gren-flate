module ByteArray exposing (decoder, fromBytes, toBytes)

import Bitwise
import Bytes exposing (Bytes, Endianness(..))
import Bytes.Decode as Decode exposing (Decoder)
import Bytes.Encode as Encode exposing (Encoder)


{-| Turn `Bytes` into `Array Int` efficiently
-}
fromBytes : Bytes -> Array Int
fromBytes buffer =
    case Decode.decode (decoder (Bytes.length buffer)) buffer of
        Nothing ->
            Array.empty

        Just value ->
            value


decoder : Int -> Decoder (Array Int)
decoder n =
    Decode.loop { v1 = n, v2 = Array.empty } decodeByteArrayHelp


{-| Turn `Array Int` into `Bytes` efficiently
-}
toBytes : Array Int -> Bytes
toBytes array =
    Array.foldr fasterEncodeFolderR { v1 = 0, v2 = 0, v3 = [] } array
        |> fasterEncodeR
        |> Encode.sequence
        |> Encode.encode


{-| Decode a byte array, but push the elements onto an existing array
-}
decodeByteArrayLowLevel : Int -> Array Int -> Decoder (Array Int)
decodeByteArrayLowLevel n initial =
    Decode.loop { v1 = n, v2 = initial } decodeByteArrayHelp


decodeByteArrayHelp : { v1 : Int, v2 : Array Int } -> Decoder (Decode.Step { v1 : Int, v2 : Array Int } (Array Int))
decodeByteArrayHelp { v1 = remaining, v2 = accum } =
    if remaining >= 4 then
        Decode.unsignedInt32 BE
            |> Decode.map
                (\new ->
                    let
                        byte1 =
                            Bitwise.shiftRightBy 24 new
                                |> Bitwise.shiftRightZfBy 0
                                |> Bitwise.and 0xFF

                        byte2 =
                            Bitwise.shiftRightBy 16 new
                                |> Bitwise.shiftRightZfBy 0
                                |> Bitwise.and 0xFF

                        byte3 =
                            Bitwise.shiftRightBy 8 new
                                |> Bitwise.shiftRightZfBy 0
                                |> Bitwise.and 0xFF

                        byte4 =
                            new
                                |> Bitwise.shiftRightZfBy 0
                                |> Bitwise.and 0xFF

                        newAccum =
                            accum
                                |> Array.pushLast byte1
                                |> Array.pushLast byte2
                                |> Array.pushLast byte3
                                |> Array.pushLast byte4
                    in
                    Decode.Loop { v1 = remaining - 4, v2 = newAccum }
                )

    else if remaining > 0 then
        Decode.unsignedInt8 |> Decode.map (\new -> Decode.Loop { v1 = remaining - 1, v2 = Array.pushLast new accum })

    else
        Decode.succeed (Decode.Done accum)


{-| Finish up with the remaining (left-most) bytes
-}
fasterEncodeR : { v1 : Int, v2 : Int, v3 : Array Encoder } -> Array Encoder
fasterEncodeR { v1 = bytesOnAccum, v2 = accum, v3 = otherEncoders } =
    let
        encoders =
            case bytesOnAccum of
                0 ->
                    otherEncoders

                1 ->
                    Array.pushFirst (Encode.unsignedInt8 accum) otherEncoders

                2 ->
                    Array.pushFirst (Encode.unsignedInt16 BE accum) otherEncoders

                _ ->
                    let
                        firstByte =
                            Bitwise.and 0xFF accum

                        otherBytes =
                            Bitwise.shiftRightBy 8 accum
                    in
                    Array.pushFirst (Encode.unsignedInt16 BE otherBytes) (Array.pushFirst (Encode.unsignedInt8 firstByte) otherEncoders)
    in
    encoders


{-| Encode a byte array using folding from the right

This function minimizes the number of encoders by combining multiple bytes into a unsignedInt32.
The smaller number of encoders is crucial because

  - fewer items to iterate over
  - less allocation
  - an implementation detail in `Encode.sequence` that makes encoding a sequence of values with the same length much slower than it could be.

-}
fasterEncodeFolderR byte { v1 = bytesOnAccum, v2 = accum, v3 = encoders } =
    case bytesOnAccum of
        0 ->
            let
                value =
                    byte
                        |> Bitwise.and 0xFF
            in
            { v1 = 1, v2 = value, v3 = encoders }

        1 ->
            let
                value =
                    byte
                        |> Bitwise.and 0xFF
                        |> Bitwise.shiftLeftBy 8
                        |> Bitwise.or accum
            in
            { v1 = 2, v2 = value, v3 = encoders }

        2 ->
            let
                value =
                    byte
                        |> Bitwise.and 0xFF
                        |> Bitwise.shiftLeftBy 16
                        |> Bitwise.or accum
            in
            { v1 = 3, v2 = value, v3 = encoders }

        _ ->
            let
                value =
                    byte
                        |> Bitwise.and 0xFF
                        |> Bitwise.shiftLeftBy 24
                        |> Bitwise.or accum
            in
            { v1 = 0, v2 = 0, v3 = Array.pushFirst (Encode.unsignedInt32 BE value) encoders }


fasterEncodeL { v1 = bytesOnAccum, v2 = accum, v3 = otherEncoders } =
    let
        encoders =
            case bytesOnAccum of
                0 ->
                    otherEncoders

                1 ->
                    Array.pushFirst (Encode.unsignedInt8 accum) otherEncoders

                2 ->
                    Array.pushFirst (Encode.unsignedInt16 BE accum) otherEncoders

                _ ->
                    let
                        firstByte =
                            Bitwise.and 0xFF accum

                        otherBytes =
                            Bitwise.shiftRightBy 8 accum
                    in
                    Array.pushFirst (Encode.unsignedInt8 firstByte) (Array.pushFirst (Encode.unsignedInt16 BE otherBytes) otherEncoders)
    in
    encoders


fasterEncodeFolderL byte { v1 = bytesOnAccum, v2 = accum, v3 = encoders } =
    case bytesOnAccum of
        0 ->
            { v1 = 1, v2 = Bitwise.and 0xFF byte, v3 = encoders }

        1 ->
            let
                value =
                    Bitwise.or (Bitwise.shiftLeftBy 8 accum) (Bitwise.and 0xFF byte)
            in
            { v1 = 2, v2 = value, v3 = encoders }

        2 ->
            let
                value =
                    Bitwise.or (Bitwise.shiftLeftBy 8 accum) (Bitwise.and 0xFF byte)
            in
            { v1 = 3, v2 = value, v3 = encoders }

        _ ->
            let
                value =
                    Bitwise.or (Bitwise.shiftLeftBy 8 accum) (Bitwise.and 0xFF byte)
            in
            { v1 = 0, v2 = 0, v3 = Array.pushFirst (Encode.unsignedInt32 BE value) encoders }
